
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://bbotlgrvdehuhmiletdf.supabase.co";
const SUPABASE_KEY = "eeyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJib3RsZ3J2ZGVodWhtaWxldGRmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU4NjI1NDksImV4cCI6MjA2MTQzODU0OX0.MAdQLvNxyh4920AAQQ2uaTyERWoDwhvr2HlM0Y3slrM";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create a single supabase client for the entire app
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
    },
    global: {
      headers: {
        'X-Client-Info': 'supabase-js-web/2.49.1',
      },
    },
    db: {
      schema: 'public',
    },
  }
);

// Add a debug function to help identify issues
export const testConnection = async () => {
  try {
    console.log("Testing Supabase connection...");
    const { data, error } = await supabase.from('services').select('name').limit(1);
    
    if (error) {
      console.error("Supabase connection test failed:", error);
      return { success: false, error };
    }
    
    console.log("Supabase connection successful:", data);
    return { success: true, data };
  } catch (err) {
    console.error("Unexpected error testing Supabase connection:", err);
    return { success: false, error: err };
  }
};

// Helper function to check if an error is related to RLS
export const isRLSError = (error: any) => {
  if (!error) return false;
  
  const errorMessage = error.message || '';
  return errorMessage.includes('violates row-level security') || 
         errorMessage.includes('infinite recursion detected');
};

// Debug function for logging queries
// Note: The .on('query') method is not available in the current version
// Instead, we'll use a simple wrapper function for debugging
export const logQuery = (queryDescription: string, queryFunction: Function) => {
  console.log(`Supabase Query: ${queryDescription} - Starting`);
  
  return async (...args: any[]) => {
    try {
      const result = await queryFunction(...args);
      console.log(`Supabase Query: ${queryDescription} - Completed`, result);
      return result;
    } catch (error) {
      console.error(`Supabase Query: ${queryDescription} - Error`, error);
      throw error;
    }
  };
};

// Log client details to help with debugging
console.log("Supabase client initialized with URL:", SUPABASE_URL);
